AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description: >-
    AWS CloudFormation sample templatere
    - Create a Lambda function for email parsing, which is triggered by SNS notification for incoming emails
    - Create a DynamoDB table to store parsed emails document details there
    - Create an IAM role for email parsing lambda function to allow it to access DynamoDB, S3 buckets, KMS
    - Create a permission for SNS topic for incoming emails to invoke lambda function for email parsing
    - Create an SNS topic subscription for SNS topic for incoming emails that triggers lambda function for email parsing
    - Create an SNS topic for EMAIL_PARSED_STATUS (the message is published to SNS by Lambda function for email parsing)
    - Create an SNS topic subscription for EMAIL_PARSED_STATUS to push messages to SQS queue for email attachment processing
    - Create an SQS queue for email attachment processing so that SNS topic for EMAIL_PARSED_STATUS can send messages to the queue
    - Create an SQS queue policy for email attachment processing to allow SNS to publish to the queue

## =================== PARAMETERS =================== ##
Parameters:
    paramTag:
        Description: Specify a unique name for tag
        Type: String
        Default: coco-email-attachment
        AllowedPattern: "[\\x20-\\x7E]*"
        ConstraintDescription: Must contain only ASCII characters

## ==================== MAPPINGS ==================== ##
# Mappings:

## ==================== CONDITIONS ==================== ##
# Conditions:

## =================== RESOURCES =================== ##
Resources:
    # Create a Lambda function for email parsing, which is triggered by SNS notification for incoming emails
    # The function will get raw email from S3 bucket,
    # Parse the email content, get all attached documents 
    # And store them in S3 bucket
    # Also it will save document details in DynamoDB table
    # And push a new notification with parsing status to SNS topic
    resourceLambdaForEmailParsing:
        Type: AWS::Lambda::Function
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W89
                    reason: 'This Lambda function is not necessary to be deployed inside a VPC.'
                -   id: W92
                    reason: 'Customer will enable ReservedConcurrentExecutions based on their use case'
                -   id: W58
                    reason: 'Lambda functions has permissions to write cloudwatch logs'
        Properties:
            FunctionName: !Sub '${paramTag}-lambda-for-email-parsing'
            Handler: index.lambda_handler
            Timeout: 900
            MemorySize: 1024 # TODO - maybe reduce to 256 or 512
            Runtime: python3.9
            Role: !GetAtt resourceIamRoleForEmailParsingLambda.Arn
            Code:
                # You can't specify a local file link (such as '/lambda-for-email-parsing.py') under "Code:" -> "ZipFile:"
                # Instead, you must put in the function code itself. It is limited to 4096 bytes. 
                # If your code is bigger, (or alternatively) you can to upload the code to S3 first and use S3Bucket and S3Key.
                # TODO - maybe try something like --zip-file fileb://function.zip
                ZipFile: |
                    # --------- START CODE  --------- #
                    import boto3
                    import email
                    import json
                    import os
                    from email import policy
                    import re
                    from datetime import datetime

                    # --------- Setup environment variables --------- #
                    EMAILS_DYNAMO_TABLE = os.environ['EMAILS_DYNAMO_TABLE']
                    ATTACHMENTS_BUCKET = os.environ['ATTACHMENTS_BUCKET']
                    EMAIL_PARSED_STATUS_NOTIFICATION_TOPIC = os.environ['EMAIL_PARSED_STATUS_NOTIFICATION_TOPIC']

                    # Main function
                    def lambda_handler(event, context):
                        print("START PROCESS")

                        try:
                            # Get message from SNS topic 
                            sns_message = get_sns_message(event)
                            new_event = json.loads(sns_message)
                            action = get_action(new_event)
                            source_email = get_source_email(new_event)
                            actionType = action['type']
                            if actionType != 'S3':
                                raise Exception('Expected action type to be S3, got: ' + actionType)
                            bucket_name = action['bucketName']
                            object_key = action['objectKey']
                            email_id = object_key
                        
                            # process raw email
                            raw_email_response = process_raw_email(bucket_name, object_key, source_email, email_id)
                            print(f"Response: {raw_email_response}")

                            # publish a success message in SNS topic
                            sns_response = publish_sns_message(raw_email_response)

                        except Exception as e:
                            print(f"An unexpected error occurred: {e}")

                        print("END PROCESS")
    
                    # Get notification message from SNS
                    def get_sns_message(sns_payload):
                        if 'Records' not in sns_payload:
                            print("No Records section")
                            raise Exception('No Records section')
    
                        if len(sns_payload['Records']) != 1:
                            print("Expected only 1 record")
                            raise Exception('Expected only 1 record')
    
                        sns_message = sns_payload['Records'][0]['Sns']['Message']
                        print(f"SNS message: {sns_message}")

                        return sns_message

                    # Get action from sns message
                    def get_action(new_event):
    
                        if 'receipt' not in new_event:
                            print("Invalid event, expected receipt section")
                            raise Exception('Invalid event, expected receipt section')
        
                        if 'action' not in new_event['receipt']:
                            print("Invalid event, expected receipt action section")
                            raise Exception('Invalid event, expected receipt action section')
      
                        action = new_event['receipt']['action']
                        print(f"SNS action: {action}")
    
                        return action

                    # Get source email from sns message
                    def get_source_email(new_event):

                        if 'mail' not in new_event:
                            print("Invalid event, expected mail section")
                            raise Exception('Invalid event, expected mail section')
        
                        if 'source' not in new_event['mail']:
                            print("Invalid event, expected email source section")
                            raise Exception('Invalid event, expected email source section')

                        source_email = new_event['mail']['source']
                        print(f"Source email: {source_email}")

                        if '=' in source_email:
                            source_email = source_email.split('=')
                            source_email = source_email[2]
    
                        return source_email

                    # Process raw email
                    def process_raw_email(bucket_name, object_key, source_email, email_id):
                        s3 = boto3.client('s3')
                        dynamodb = boto3.client('dynamodb')
    
                        # Retrieve the email stored in S3 that triggered this event
                        s3_raw_email = s3.get_object(Bucket=bucket_name, Key=object_key)

                        # Extract the email sender's address and, if present, decodes it if encoded
                        raw_email_str = s3_raw_email['Body'].read().decode('utf-8')
                        raw_email = \
                            email.parser.Parser(policy=policy.strict).parsestr(raw_email_str)

                        # Parse the email content
                        now = datetime.now()
                        dt_string = now.strftime('%d/%m/%Y %H:%M:%S')
                        attachment_index = 0
                        attachments = []
                        document_name_list = ''
                        for part in raw_email.walk():
                            # Check if there is any attached file in raw email
                            if part.is_attachment():
                                if len(part.get_filename()):
                                    # Handle when filename is present
                                    # a) Construct attachment_key by appending a sanitized version of the filename (removing all non-alphanumeric characters) to a base object_key followed by '/attachments/'.
                                    attachment_key = object_key + '/attachments/' + re.sub(r'[^a-zA-Z0-9]', '', part.get_filename())
                                    # b) Construct a job_tag using a combination of the first five characters of email_id and the sanitized filename
                                    job_tag = email_id[0:5] + '_' + re.sub(r'[^a-zA-Z0-9]','', part.get_filename())
                                    attachment_index += 1
                                else:
                                    # Handle when filename is missing
                                    # a) Create a unique identifier 
                                    attachment_id = str(attachment_index)
                                    # b) Construct attachment_key by appending a base object_key followed by '/attachments/' and a unique identifier
                                    attachment_key = object_key + '/attachments/' + attachment_id
                                    # c) Construct job_tag by appending the first five characters of email_id followed by '/attachments/' and a unique identifier
                                    job_tag = email_id[0:5] + '_' + attachment_id
                                    attachment_index += 1
            
                                # Save attachment in another S3 bucket
                                s3.put_object(Bucket=ATTACHMENTS_BUCKET, Key=attachment_key, Body=part.get_content())
                                document_name_list += part.get_filename() + ','
                                print(f"Document was successfully extracted and saved in '{ATTACHMENTS_BUCKET}'. Document name: '{part.get_filename()}'.")
            
                                # Save attachment details in DB
                                item = {
                                    'email_id': {'S': email_id},
                                    'subject': {'S': raw_email['subject']},
                                    'source': {'S': source_email},
                                    'document_name': {'S': part.get_filename()},
                                    'timestamp': {'S': dt_string},
                                }
                                dynamodb.put_item(TableName=EMAILS_DYNAMO_TABLE, Item=item, ReturnValues='NONE')
                                print(f"Document details were successfully saved in '{EMAILS_DYNAMO_TABLE}'. Document name: '{part.get_filename()}'.")
            
                                # Append attachments details  
                                attachments.append({
                                    'attachment_id': part.get_filename(),
                                    'content_type': part.get_content_type(),
                                    'key': attachment_key
                                })
     
                        response = {'email_id': email_id, 'attachments': attachments}
                        return response

                    def publish_sns_message(raw_email_response):
                        sns = boto3.client('sns')
                        sns_message = {
                                'subject': 'EMAIL_PARSED_STATUS',
                                'status': 'SUCCESS',
                                'details': raw_email_response
                                }
                        try:
                            # SNS messages are always strings - make the string a serialized version of custom object
                            # also it is required to wrap the custom message in 'default' property 
                            response = sns.publish(
                                    TopicArn=EMAIL_PARSED_STATUS_NOTIFICATION_TOPIC,
                                    Subject=sns_message['subject'],
                                    Message=json.dumps({'default': json.dumps(sns_message)}),
                                    MessageStructure='json'
                            )
                            message_id = response['MessageId']
                            print("Successfully published message to SNS topic")
                        except Exception as e:
                            print("Failed to publish message to SNS topic")
                            raise Exception(f'Failed to publish message to SNS topic. Error: {e}')
                        else:
                            return message_id

                        # Keep this comment for CloudFormation sake - there is an issue that doesn't make sense

                    # --------- END CODE  --------- #

            Environment:
                Variables:
                    EMAILS_DYNAMO_TABLE: !Ref resourceDynamoDbTableForParsedEmails
                    ATTACHMENTS_BUCKET: !ImportValue 'exported-s3-bucket-for-attached-files-from-emails'
                    EMAIL_PARSED_STATUS_NOTIFICATION_TOPIC:  !Ref resourceSnsTopicForEmailParsedStatus
            Tags:
                -   Key: project-name
                    Value: !Ref paramTag
        DependsOn:
                - resourceIamRoleForEmailParsingLambda
                - resourceDynamoDbTableForParsedEmails
                - resourceSnsTopicForEmailParsedStatus
                # 'exported-s3-bucket-for-attached-files-from-emails'

    # Create a DynamoDB table to store parsed emails document details there
    resourceDynamoDbTableForParsedEmails:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub '${paramTag}-dynamodb-table-for-parsed-emails'
            AttributeDefinitions:
                -   AttributeName: email_id
                    AttributeType: S
                -   AttributeName: document_name
                    AttributeType: S         
            BillingMode: PAY_PER_REQUEST
            SSESpecification:
                KMSMasterKeyId: !ImportValue 'exported-kms-key-alias'
                SSEEnabled: true
                SSEType: KMS      
            KeySchema:
                -   AttributeName: email_id
                    KeyType: HASH
                -   AttributeName: document_name
                    KeyType: RANGE        
            PointInTimeRecoverySpecification:
                PointInTimeRecoveryEnabled: true
            Tags:
                -   Key: project-name
                    Value: !Ref paramTag
        # DependsOn:
            # NONE

    # Create an IAM role for email parsing lambda function to allow it to access: 
    # - DynamoDB table: resourceDynamoDbTableForParsedEmails
    # - SNS topic: resourceSnsTopicForEmailParsedStatus
    # - KMS CMK: 'exported-kms-key-alias'
    # - S3 bucket: 'exported-s3-bucket-for-attached-files-from-emails'
    # - S3 bucket: 'exported-s3-bucket-for-raw-emails'
    # - EC2 NetworkInterfaces
    # - Logs
    resourceIamRoleForEmailParsingLambda:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -   id: W11
                        reason: "No resource level permissions for ec2.DescribeNetworkInterfaces"
        Properties:
            RoleName: !Sub '${paramTag}-aim-role-for-email-parsing-lambda'
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -   Sid: AllowLambdaToAssumeRole
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Path: /
            Policies:
                -   PolicyName: !Sub '${paramTag}-aim-policy-for-email-parsing-lambda'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -   Sid: AllowToWriteInDynamoDb
                                Effect: Allow
                                Action:
                                    -   dynamodb:PutItem
                                Resource: 
                                    -   !GetAtt resourceDynamoDbTableForParsedEmails.Arn
                            -   Sid: AllowToPublishToSns
                                Effect: Allow
                                Action:
                                    -   sns:Publish
                                Resource:
                                    -   !Ref resourceSnsTopicForEmailParsedStatus
                            -   Sid: AllowToGenerateKmsKeyAndDescrypt
                                Effect: Allow 
                                Action:
                                    -   kms:GenerateDataKey
                                    -   kms:Decrypt
                                Resource: 
                                    -   !ImportValue 'exported-kms-key-arn'
                            -   Sid: AllowToWriteAndReadFromS3
                                Effect: Allow 
                                Action:
                                    -   s3:PutObject
                                    -   s3:ListBucket
                                    -   s3:GetObject
                                Resource:
                                    - !Join
                                        - ''
                                        - - 'arn:aws:s3:::'
                                          - !ImportValue 'exported-s3-bucket-for-attached-files-from-emails'
                                    - !Join
                                        - ''
                                        - - 'arn:aws:s3:::'
                                          - !ImportValue 'exported-s3-bucket-for-attached-files-from-emails'
                                          - /*                 
                            -   Sid: AllowToS3
                                Effect: Allow
                                Action: 
                                    - s3:GetObject
                                Resource:
                                    - !Join
                                        - ''
                                        - - 'arn:aws:s3:::'
                                          - !ImportValue 'exported-s3-bucket-for-raw-emails'
                                          - /*
                            -   Sid: AllowToCreateLogGroups
                                Effect: Allow
                                Action: 
                                    - logs:CreateLogGroup
                                Resource: 
                                    - 'arn:aws:logs:*:*:*'
                            -   Sid: AllowToInsertLogs
                                Effect: Allow
                                Action:
                                    - logs:PutLogEvents
                                    - logs:CreateLogStream
                                Resource: 
                                    - !Sub 'arn:aws:logs:*:*:log-group:/aws/lambda/${paramTag}-lambda-for-email-parsing:*'
        DependsOn:
            -   resourceDynamoDbTableForParsedEmails
            -   resourceSnsTopicForEmailParsedStatus
            #   'exported-kms-key-arn'
            #   'exported-s3-bucket-for-attached-files-from-emails'
            #   'exported-s3-bucket-for-raw-emails'

    # Create a permission for SNS topic for incoming emails to invoke lambda function for email parsing
    resourcsPermissionForSnsTopicForIncomingEmailsToInvokeLambda:
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref resourceLambdaForEmailParsing
            Action: lambda:InvokeFunction
            Principal: sns.amazonaws.com
            SourceArn: !ImportValue 'exported-sns-topic-arn-for-incoming-emails'
        DependsOn:
            - resourceLambdaForEmailParsing
            # 'exported-sns-topic-arn-for-incoming-email

    # Create an SNS topic subscription for SNS topic for incoming emails that triggers lambda function for email parsing
    resourceSnsTopicSubscriptionForIncomingEmails:
        Type: AWS::SNS::Subscription
        Properties:
            Endpoint: !GetAtt resourceLambdaForEmailParsing.Arn
            Protocol: lambda
            TopicArn: !ImportValue 'exported-sns-topic-arn-for-incoming-emails'
        DependsOn:
        - resourceLambdaForEmailParsing
        # 'exported-sns-topic-arn-for-incoming-emails'

    # Create an SNS topic for EMAIL_PARSED_STATUS (the message is published to SNS by Lambda function for email parsing)
    resourceSnsTopicForEmailParsedStatus:
        Type: AWS::SNS::Topic
        Properties:
            DisplayName: !Sub '${paramTag}-sns-topic-for-email-parsed-status'
            TopicName: !Sub '${paramTag}-sns-topic-for-email-parsed-status'
            # SNS topic must use an AWS KMS customer managed key instead of the default key (AWS/SNS)
            # This is because the default key policy doesn't include the required permissions for the AWS service to perform AWS KMS operations
            KmsMasterKeyId: !ImportValue 'exported-kms-key-alias'
            Tags:
                -   Key: project-name
                    Value: !Ref paramTag
        # DependsOn:
            # 'exported-kms-key-alias'

    # Create an SNS topic subscription for EMAIL_PARSED_STATUS to push messages to SQS queue for email attachment processing
    resourceSnsTopicSubscriptionForEmailParsedStatus:
        Type: AWS::SNS::Subscription
        Properties:
            TopicArn: !Ref resourceSnsTopicForEmailParsedStatus
            Endpoint: !GetAtt resourceSqsQueueForEmailAttachmentProcessing.Arn
            Protocol: sqs
            RawMessageDelivery: 'true'
        DependsOn:
            - resourceSqsQueueForEmailAttachmentProcessing
            - resourceSnsTopicForEmailParsedStatus
            # 'exported-sns-topic-arn-for-incoming-emails'

    # Create an SQS queue for email attachment processing so that SNS topic for EMAIL_PARSED_STATUS can send messages to the queue
    resourceSqsQueueForEmailAttachmentProcessing:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub '${paramTag}-sqs-queue-for-email-attachment-processing'
            Tags:
                -   Key: project-name
                    Value: !Ref paramTag
        # DependsOn:
            # NONE

    # Create an SQS queue policy for email attachment processing to allow SNS to publish to the queue
    resourceSqsQueuePolicyForEmailAttachmentProcessing:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues:
                - !Ref resourceSqsQueueForEmailAttachmentProcessing
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                -   Sid: AllowSnsToSendMessageToSqs
                    Effect: Allow
                    Principal:
                        Service:
                            -   sns.amazonaws.com
                    Action:
                        -   sqs:SendMessage
                    Resource: !GetAtt resourceSqsQueueForEmailAttachmentProcessing.Arn
                    Condition:
                        ArnEquals:
                            aws:SourceArn: !Ref resourceSnsTopicForEmailParsedStatus
        DependsOn:
            - resourceSqsQueueForEmailAttachmentProcessing
            - resourceSnsTopicForEmailParsedStatus
                
## =================== OUTPUTS =================== ##  
Outputs:
    outputLambdaForEmailParsing:
        Description: Name of lambda function for email parsing
        Value: !Ref resourceLambdaForEmailParsing
        Export:
            Name: 'exported-lambda-for-email-parsing'
    outputLambdaArnForEmailParsing:
        Description: Arn of lambda function for email parsing
        Value: !GetAtt resourceLambdaForEmailParsing.Arn
        Export:
            Name: 'exported-lambda-arn-for-email-parsing'
    outputSqsQueueArnForEmailAttachmentProcessing:
        Description: Arn of SQS queue for email attachment processing
        Value: !GetAtt resourceSqsQueueForEmailAttachmentProcessing.Arn
        Export:
            Name: 'exported-sqs-queue-for-email-attachment-processing'